* On Removing NANs quickly.

Assume we would like to print only lines where a substring =NAN= occures not
more than some defined number of times --- say, three max.

It seems the fastest way is to write a few lines of C code (below). Then compile
it with the standard =gcc ./killnalines.c -o ./killNAs= and use as follows.

Assume we have file =test.csv= with the following nine lines:

#+begin_src csv
  Something, SomethingElse, Anotherone
  1,2, NAN, 3, 5,@$ NAN, \crazy stuff !
  2, NAN, 3 4
  NAN, this , one, as well
  this
  NAN NAN, this is , NAN, also, NAN
  again no nans
  NAN NAN NAN this is NAN
  
#+end_src

The structure doesn't matter, we will be just counting substrings per line. Now,
assume we want to print only lines that contain no more than 3 NANs, which are
lines 1--5,7, and 8 (the latter is an empty line). Here I count starting from the
header line. So, we just do:

#+begin_src bash
  $ cat ./test.csv | ./killNAs > ./not_many_NAs.csv
  $ cat ./not_many_NAs.csv
#+end_src

#+begin_src csv
  Something, SomethingElse, Anotherone
  1,2, NAN, 3, 5,@$ NAN, \crazy stuff !
  2, NAN, 3 4
  NAN, this , one, as well
  this
  again no nans

#+end_src

It seems, it worked. To cross-check:
#+begin_src bash
  ‚ùØ wc -l ./test.csv ./not_many_NAs.csv
  9 ./test.csv
  7 ./not_many_NAs.csv
 16 total
#+end_src


* The small program.
#+begin_src C
#include <stdio.h>
#include <stdlib.h>

#define MAX_NO_NA 3

int main(int argc, char *argv[])
{
  char * line = NULL;
  size_t len = 0;
  int no_lines = 0, lines_printed = 0;

  while (getline(&line, &len, stdin) != -1)
    {
      int count = 0; // NANs count per line

      /* Modes:
         1 -- just seen N,
         2 -- just seen NA,
         0 -- reset. */
      int mode = 0;

      char * s = line;
      while (*s) {
        if((*s == 'N') && mode ==0 )mode++;
        if((*s == 'A') && mode ==1 )mode++;
        if((*s == 'N') && mode ==2 ){
          count++;
          mode = 0;
        }
        s++;
      }
      if (count <= MAX_NO_NA){
        printf("%s", line);
        lines_printed++;
      };
      no_lines++;
    }
  fprintf(stderr, "%d lines printed out of %d in total.\n", lines_printed, no_lines);
  if(line) free(line);
  return 0;
}
#+end_src
